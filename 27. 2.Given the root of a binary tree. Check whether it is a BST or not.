#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node {
    int data;
    struct node* left;
    struct node* right;
};
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
    struct node* node
        = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
 
    return (node);
}
 
int maxValue(struct node* node)
{
    if (node == NULL) {
        return 0;
    }
 
    int leftMax = maxValue(node->left);
    int rightMax = maxValue(node->right);
 
    int value = 0;
    if (leftMax > rightMax) {
        value = leftMax;
    }
    else {
        value = rightMax;
    }
 
    if (value < node->data) {
        value = node->data;
    }
 
    return value;
}
 
int minValue(struct node* node)
{
    if (node == NULL) {
        return 1000000000;
    }
 
    int leftMax = minValue(node->left);
    int rightMax = minValue(node->right);
 
    int value = 0;
    if (leftMax < rightMax) {
        value = leftMax;
    }
    else {
        value = rightMax;
    }
 
    if (value > node->data) {
        value = node->data;
    }
 
    return value;
}
